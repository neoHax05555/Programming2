/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.alec.sorting;

import java.util.ArrayList;
import java.util.Comparator;

public class Main {
    public static void main(String[] args) {
        ArrayList<Student> students = new ArrayList<>();
        students.add(new Student(6, "David", "1254 W. Fire Ct."));
        students.add(new Student(9, "Samantha", "5435 Cannon Ave."));
        students.add(new Student(3, "Mac", "123 Advance Ln."));
        students.add(new Student(8, "Sarahi", "1342 S. Halifax St."));
        students.add(new Student(1, "Jeffrey", "432 Dubai Way"));
        students.add(new Student(4, "Eduardo", "145 N. Wood Way"));
        students.add(new Student(0, "Allison", "123 Fake St."));
        students.add(new Student(2, "Smith", "52 Average Ct."));
        students.add(new Student(5, "Noah", "1354 Oak St."));
        students.add(new Student(7, "Fabiola", "125 Fake St."));

        System.out.println("Before sorting: ");
        for (Student student : students) {
            System.out.println(student.toString());
        }

        sort(students, new StudentNameComparator());
        System.out.println("After sorting on name: ");
        for (Student student : students) {
            System.out.println(student.toString());
        }

        sort(students, new StudentRollidComparitor());
        System.out.println("After sorting on rollid: ");
        for (Student student : students) {
            System.out.println(student.toString());
        }
    }

    /**
     * Sorts items in array in ascending order (lowest to highest) using a selection sort pattern.
     * TODO: Implement option to sort ascending or descending.
     *
     * @param students {@link ArrayList} of type {@link Student}.
     * @param comparator A {@link Comparator} object to sort with.
     */
    static void sort(ArrayList<Student> students, Comparator<Student> comparator) {
        Student tmpStudent;
        int lowestIndex;

        for (int i = 0; i < students.size(); i++) {
            lowestIndex = i;
            for (int i2 = i+1; i2 < students.size(); i2++) {
                // If this returns larger than 0, then the student we are comparing with cur lowest is now the smallest.
                if (0 < comparator.compare(students.get(lowestIndex), students.get(i2))) {
                    lowestIndex = i2;
                }
            }
            // If cur index is not the lowest, then we need to swap the lowest value with the value in the cur index.
            if (i != lowestIndex) {
                tmpStudent = students.get(i);
                students.set(i, students.get(lowestIndex));
                students.set(lowestIndex, tmpStudent);
            }
        }
    }
}
