/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.alec.portfolioproject;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Scanner;

public class Main {
    private static final String DIR_NAME = "tmp";
    private static final String FILE_NAME = "students.txt";

    public static void main(String[] args) {
        LinkedList<Student> students = new LinkedList<>();
        ArrayList<String> strings = new ArrayList<>();
        boolean input = true;

        while (input) {
            Student student;
            student = takeInput();
            if (null == student) {
                input = false;
            } else {
                students.add(student);
            }



        }

        students.add(new Student("Jim", "123 Fake St.", 3.4));
        students.add(new Student("Jane", "133 Cake St.", 3.9));
        students.add(new Student("Al", "133 Cake St.", 3.9));
        students.add(new Student("Smith", "133 Cake St.", 3.9));

        students.sort(new Comparator<Student>() {
            @Override
            public int compare(Student student, Student t1) {
                return student.getName().compareTo(t1.getName());
            }
        });

        for (Student student : students) {
            strings.add(student.toString());
        }
        printToFile(strings);
    }

    /**
     * System independent method to writes sting to file.
     *
     * @param strings An Array list of strings to print to file.
     *
     * @return true  - if write was successful.
     *         false - if failed to write to file.
     */
    private static boolean printToFile(ArrayList<String> strings) {
        File fileLocation = new File(new File(".").getAbsolutePath(), DIR_NAME);
        File file = new File(fileLocation, FILE_NAME);
        boolean success = false;

        // Create dir if DNE.
        if (fileLocation.mkdir()) {
            if (!fileLocation.exists()) {
                // Already init to false, so a failure to create dir will return false.
                return success;
            }
        }

        try (FileOutputStream fos = new FileOutputStream(file)) {
            for (String string : strings) {
                // Append newline to end of each string, else all on one line.
                fos.write((string + "\n").getBytes());
                fos.flush();
            }
            success = true;
        } catch (IOException e) {
            System.out.println("Failed to write output.\n" + e);
        }

        return success;
    }

    private static Student takeInput() {
        Scanner scanner = new Scanner(System.in);
        boolean scanning = true;
        String name = "";
        String address = "";
        double gpa = 0.0;

        while (scanning) {

            System.out.println("Please enter a name or Q to quit: ");
            name = scanner.nextLine();
            if (name.equals("Q")) {
                return null;
            }
            System.out.println("Please enter an address: ");
            address = scanner.nextLine();
            System.out.println("Please enter the students gpa: ");
            try {
                gpa = Double.parseDouble(scanner.nextLine());
                if (gpa >= 0 && gpa <= 5) {
                    scanning = false;
                } else {
                    System.out.println("Your gpa should be within the range of: 0.0 -> 5.0");
                    throw new NumberFormatException();
                }
            } catch (NumberFormatException e) {
                System.out.println("Invalid number format, please enter a valid gpa.");
            }
        }
        return new Student(name, address, gpa);
    }
}
